# Template configuration. Replace:
# + {{ site_root }} with the root directory (e.g. /home/watchword/watchword)
# + {{ domain_name }} with the main domain name
# + {{ ping_domain }} with the ping-only domain

upstream gunicorn {
    server unix:{{ site_root }}/sock/gunicorn;
}

server {
    listen 80;
    server_name {{ domain_name }};

    # To support Let's Encrypt challenges, we need to serve challenge files on
    # HTTP port 80. For everything else, we want to require HTTPS port 443.
    location /.well-known/acme-challenge/ {
        alias /etc/letsencrypt/challenges/;
        try_files $uri =404;
    }

    location / {
        return 301 https://$server_name$request_uri;
    }
}

server {
    listen 443 ssl;
    server_name {{ domain_name }};

    ssl_certificate /etc/letsencrypt/{{ domain_name }}.chained.pem;
    ssl_certificate_key /etc/letsencrypt/keys/{{ domain_name }}.key;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    # This is Mozilla's "Intermediate compatibility" cipher list
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
    ssl_prefer_server_ciphers on;
    ssl_dhparam /etc/letsencrypt/dhparams.pem;
    # Uncomment this if you know what you're doing
    #add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
    add_header X-Frame-Options "DENY";

    access_log /var/log/nginx/{{ domain_name }}.access.log;
    error_log /var/log/nginx/{{ domain_name }}.error.log;
    # TLS connection information
    log_format ssl "$time_local $server_name $remote_addr $connection $connection_requests $ssl_protocol $ssl_cipher $ssl_session_id";
    access_log /var/log/nginx/{{ domain_name }}.access.tls.log ssl;

    try_files $uri @gunicorn;
    
    # Serve static files which django's whitenoise won't know about and which
    # won't be requested with the /static/ prefix.
    #location /favicon.ico {
    #    alias {{ site_root }}/static/favicon.ico;
    #}
    
    #location /robots.txt {
    #    alias {{ site_root }}/static/robots.txt;
    #}
    
    location @gunicorn {
        proxy_pass http://gunicorn;
        proxy_redirect off;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # Requires later versions of nginx, uncomment if possible
        #proxy_set_header X-Request-Start "t=${msec}";
    }
}

server {
    listen 80;
    listen 443 ssl;
    server_name {{ ping_domain }};

    ssl_certificate /etc/letsencrypt/{{ ping_domain }}.chained.pem;
    ssl_certificate_key /etc/letsencrypt/keys/{{ ping_domain }}.key;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    # This is Mozilla's "Intermediate compatibility" cipher list
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
    ssl_prefer_server_ciphers on;
    ssl_dhparam /etc/letsencrypt/dhparams.pem;
    #add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
    add_header X-Frame-Options "DENY";

    access_log /var/log/nginx/{{ ping_domain }}.access.log;
    error_log /var/log/nginx/{{ ping_domain }}.error.log;
    # TLS connection information
    #log_format ssl "$time_local $server_name $remote_addr $connection $connection_requests $ssl_protocol $ssl_cipher $ssl_session_id";
    access_log /var/log/nginx/{{ ping_domain }}.access.tls.log ssl;

    # Let's Encrypt challenges are served directly
    location /.well-known/acme-challenge/ {
        alias /etc/letsencrypt/challenges/;
        try_files $uri =404;
    }

    # We'll send along requests which appear to be pings (and since Django's
    # URL processing will expect the /ping/ prefix, add that on first).
    rewrite "^/([0-9a-fA-F]{10})$" /ping/$1 last;
    location ~ "^/ping/[0-9a-fA-F]{10}$" {
        proxy_pass http://gunicorn;
        proxy_redirect off;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #proxy_set_header X-Request-Start "t=${msec}";
    }

    # Catch everything else and ignore it
    location / {
        return 444;
    }
}

# Don't let requests for unrecognized server names propagate upstream
server {
    listen 80;
    listen 443 ssl default_server;
    server_name _;
    ssl_certificate /etc/letsencrypt/selfsign.crt;
    ssl_certificate_key /etc/letsencrypt/keys/selfsign.key;
    # Turn off SSLv3 so that SSL Labs doesn't claim we're vulnerable to POODLE
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    return 444;
}
